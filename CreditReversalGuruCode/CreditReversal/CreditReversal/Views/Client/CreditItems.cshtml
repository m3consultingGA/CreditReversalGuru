
@{
    /**/

    ViewBag.Title = "Credit Items";
    Layout = "~/Views/Shared/_secureLayoutPage.cshtml";
    string from = null, role = null;
    if (Request["from"] != null)
    {
        from = "db";
    }
    if (Session["UserRole"] != null)
    {
        role = Session["UserRole"].ToString();
    }
}
<style>
    .ui-autocomplete {
        max-height: 150px;
        overflow-y: auto;
    }

    .input-group .form-control {
        position: unset;
    }

    .tdClass {
        font-weight: 600;
    }

    .loader1 {
        border: 16px solid #f3f3f3;
        border-radius: 50%;
        border-top: 16px solid #3498db;
        width: 100px;
        height: 100px;
        -webkit-animation: spin 2s linear infinite; /* Safari */
        animation: spin 2s linear infinite;
        position: fixed;
        top: 50%;
        left: 50%;
        margin: -50px 0px 0px -50px;
        z-index: 50;
    }



    @@-webkit-keyframes spin {
        0% {
            -webkit-transform: rotate(0deg);
        }

        100% {
            -webkit-transform: rotate(360deg);
        }
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
</style>
<title>Credit Items</title>
@if (ViewBag.CreditRepItemId != null)
{
    <input type="hidden" id="hdnCreditRepItemId" value="@ViewBag.CreditRepItemId" />
}
<div class="page-header">
    <h3 class="page-title">Credit Items</h3>
    <div style="padding-bottom:10px;">
        <ol class="breadcrumb pull-right">
            <li class="breadcrumb-item">
                <a href="@ViewBag.Dasboard"><i class="fa fa-dashboard"></i>&nbsp;Dashboard</a>
            </li>
            @*@if (from == null)
                {
                    <li class="breadcrumb-item">
                        <a href="/Client/Index"><i class="fa fa-user"></i>&nbsp;Manage Clients</a>
                    </li>
                }*@
            <li class="breadcrumb-item active">Credit Items </li>
        </ol>
    </div>
</div>
<div class="loader1"> </div>
<div id="overlay"></div>

<div class="col-md-12">
    <div class="row">
        <div class="portlet portlet-boxed">
            <div class="portlet-header">
                <h4 class="portlet-title">
                    <u>Credit Items</u>
                </h4>

            </div> <!-- /.portlet-header -->
            <div class="portlet-body">
                <div class="row" style="padding-bottom:12px;padding-top:5px;">
                    @if (ViewBag.AgentName != null)
                    {

                        if (role.ToUpper() != "CLIENT")
                        {
                            <div class="col-md-3">
                                <label>Client:</label> @ViewBag.Cname
                            </div>
                        }
                        else
                        {
                            <div class="col-md-3">
                                <label>Agent:</label> @ViewBag.AgentName
                            </div>
                        }

                        <div class="col-md-3">
                            <label>Pull Credit Date:</label> @ViewBag.DateReportPulls
                        </div>
                        <div class="col-md-3">
                            <label>Round:</label> @ViewBag.Round
                        </div>

                        <input type="hidden" id="hdnRound" value="@ViewBag.Round" />
                    }

                </div>


                <div class="row" style="padding-bottom:12px;">
                    <span class="pull-left"><h5>Account History</h5></span>
                    @if (role.ToUpper() != "CLIENT")
                    {
                        <span class="pull-right">
                            <button class="btn btn-secondary" id="RefreshCreditPull">Refresh Credit Pull</button>
                            <button class="btn btn-secondary" id="AddChallenge">Create Challenge</button>
                        </span>
                    }
                </div>

                <div class="row">
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th width="20%"></th>
                                    @*<th width="23%" style="text-align:center;background-color:#DAB96A;color:#fff;">TransUnion</th>
                                        <th width="23%" style="text-align:center;background-color:#98BDC5;color:#fff;">Experian</th>
                                        <th width="23%" style="text-align:center;background-color:#CBD06C;color:#fff;">Equifax</th>*@

                                    <th width="23%" style="text-align:center;background-color:#00A6CA;color:#fff;">TransUnion</th>
                                    <th width="23%" style="text-align:center;background-color:#93267D;color:#fff;">Experian</th>
                                    <th width="23%" style="text-align:center;background-color:#981e32;color:#fff;">Equifax</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (ViewBag.challenges != null)
                                {
                                    var i = 0;
                                    var j = 0;


                                    foreach (var item in ViewBag.challenges)
                                    {
                                        
                                <tr>
                                    @if (role.ToUpper() != "CLIENT" && item.Heading != "CreditreportId")
                                    {
                                        //displaying all headings except creditreportid for agent
                                            <td class="tdClass">@item.Heading</td>
                                    }
                                    else
                                    {
                                        //displaying all headings except Challenge and creditreportid for client
                                        if (item.Heading != "Challenge" && item.Heading != "CreditreportId")
                                        {
                                                <td class="tdClass">@item.Heading</td>
                                        }
                                    }
                                    @if (i == 2)
                                    {
                                        <lable id="hdnEXPEAccountType_@j" hidden>@item.EXPERIAN</lable>
                                        <lable id="hdnEQUIAccountType_@j" hidden>@item.EQUIFAX</lable>
                                        <lable id="hdnTRANSAccountType_@j" hidden>@item.TRANSUNION</lable>
                                    }
                                    @if (i == 3 || i == 4 || i == 5)
                                    {
                                        //High Credit and Balance and monthly payment right alignment
                                        <td align="right">@item.TRANSUNION</td>
                                        <td align="right">@item.EXPERIAN</td>
                                        <td align="right">@item.EQUIFAX</td>
                                    }
                                    else if (i == 9)
                                    {
                                        
                                        if (item.TRANSUNION == "EDUCATION")
                                        {

                                            <td>
                                                <select name="LoanStatus" id="TULoanStatus_@j" class="form-control">
                                                    <option value="0">--Select LoanStatus--</option>
                                                    <option value="Deferment">Deferment</option>
                                                    <option value="Forbearance">Forbearance</option>
                                                </select>
                                            </td>

                                        }
                                        if (item.EXPERIAN == "EDUCATION")
                                        {
                                            <td>
                                                <select name="LoanStatus" id="EXLoanStatus_@j" class="form-control">
                                                    <option value="0">--Select LoanStatus--</option>
                                                    <option value="Deferment">Deferment</option>
                                                    <option value="Forbearance">Forbearance</option>
                                                </select>
                                            </td>
                                        }
                                        //if (item.EQUIFAX != "" || item.EQUIFAX != "0")
                                        if (item.EQUIFAX == "EDUCATION")
                                        {
                                            <td>
                                                <select name="LoanStatus" id="EQLoanStatus_@j" class="form-control">
                                                    <option value="0">--Select LoanStatus--</option>
                                                    <option value="Deferment">Deferment</option>
                                                    <option value="Forbearance">Forbearance</option>
                                                </select>
                                            </td>
                                        }
                                    }
                                    else if (i == 10)
                                    {
                                        if (item.TRANSUNION == "EDUCATION")
                                        {
                                            <td><input type="number" class="form-control" max="9" id="TUPastDueDays_@j" /></td>

                                        }
                                        if (item.EXPERIAN == "EDUCATION")
                                        {
                                            <td><input type="number" class="form-control" maxlength="9" id="EXPastDueDays_@j" /></td>
                                        }
                                        if (item.EQUIFAX == "EDUCATION")
                                        {
                                            <td><input type="number" class="form-control" maxlength="9" id="EQPastDueDays_@j" /></td>
                                        }
                                    }
                                    else if (i == 0)
                                    {

                                        //bank name bold color
                                        <td style="font-weight:600">@item.TRANSUNION</td>
                                        <td style="font-weight:600">@item.EXPERIAN</td>
                                        <td style="font-weight:600">@item.EQUIFAX</td>
                                    }
                                    else
                                    {

                                        if (i == 12)
                                        {
                                            if (role.ToUpper() != "CLIENT")
                                            {

                                                //transunion challenge text dropdown
                                                if (item.TRANSUNION == "" || item.TRANSUNION == "-")
                                                {
                                                    <td></td>
                                                }
                                                else if (item.TRANSUNION == "" || item.TRANSUNION == "0")
                                                {
                                                    string roundtu = "Round-1";
                                                    <td>
                                                        <div class="input-group">
                                                            <span class="input-group-addon btn btn-default" id="sizing-addon1">
                                                                <input type="checkbox" class="use-address" name="case[]" id="chkTRANS_@j">
                                                                <label id="lblroundTUnew_@j" style="font-size:12px;top:-5px;">@roundtu</label>
                                                            </span>
                                                            <textarea class="form-control custom-control" rows="2" style="resize:both;" id="txtAccountTypeTU_@j" onkeydown="AutoFillAccountTypeTU(@j)"
                                                                      name="txtAccountTypeTU_@j" placeholder="Select account type or enter own challenge text"></textarea>
                                                            <label id="lblChallengeTextTU_@j"></label>

                                                        </div>

                                                    </td>
                                                }
                                                else if (!string.IsNullOrEmpty(@item.TRANSUNION))
                                                {
                                                    <td>
                                                        @{
                                                            string challengetextTU = @item.TRANSUNION;
                                                         //   string[] strTU = challengetextTU.Split('~');
                                                            string[] strTU = challengetextTU.Contains("~") ? challengetextTU.Split('~') : challengetextTU.Split('-');
                                                            string roundTU = "";
                                                        }
                                                        @if (strTU[1] == "1")
                                                        {
                                                            int rd = Convert.ToInt32(strTU[1]) + 1;
                                                            roundTU = "Round-" + rd;
                                                        }
                                                        else if (Convert.ToInt32(strTU[1]) > 1)
                                                        {
                                                            int rd = Convert.ToInt32(strTU[1]) + 1;
                                                            roundTU = "Round-" + rd;
                                                        }

                                                        @if (challengetextTU.Contains("Round"))
                                                        {
                                                            <div class="input-group">
                                                                <span class="input-group-addon btn btn-default" id="sizing-addon1">
                                                                    <input type="checkbox" class="use-address" name="case[]" id="chkTRANS_@j">
                                                                    <label id="lblroundTUnew_@j" style="font-size:12px;">@roundTU</label>
                                                                    <label id="lblroundTU_@j" hidden>@strTU[0]-@strTU[1]</label>
                                                                </span>
                                                                <textarea class="form-control custom-control" rows="2" style="resize:both;" id="txtAccountTypeTU_@j" onkeydown="AutoFillAccountTypeTU(@j)"
                                                                          name="txtAccountTypeTU_@j" placeholder="Select account type or enter own challenge text"></textarea>
                                                                <label id="lblChallengeTextTU_@j"></label>

                                                            </div>
                                                        }

                                                    </td>
                                                }


                                                //EXPERIAN challenge text dropdown
                                                if (item.EXPERIAN == "" || item.EXPERIAN == "-")
                                                {
                                                    <td></td>
                                                }
                                                else if (item.EXPERIAN == "" || item.EXPERIAN == "0")
                                                {
                                                    string roundex = "Round-1";
                                                    <td>
                                                        <div class="input-group">
                                                            <span class="input-group-addon btn btn-default" id="sizing-addon1">
                                                                <input type="checkbox" class="use-address" name="case[]" id="chkEXPE_@j">
                                                                <label id="lblroundEXnew_@j" style="font-size:12px;">@roundex</label>
                                                            </span>
                                                            <textarea class="form-control custom-control" rows="2" style="resize:both;" id="txtAccountTypeEX_@j" onkeydown="AutoFillAccountTypeEX(@j)"
                                                                      name="txtAccountTypeEX_@j" placeholder="Select account type or enter own challenge text"></textarea>
                                                            <label id="lblChallengeTextEX_@j"></label>

                                                        </div>


                                                    </td>
                                                }
                                                else if (!string.IsNullOrEmpty(@item.EXPERIAN))
                                                {
                                                    <td>
                                                        @{
                                                            string challengetextEX = @item.EXPERIAN;
                                                          //  string[] strEX = challengetextEX.Split('~');
                                                            string[] strEX = challengetextEX.Contains("~") ? challengetextEX.Split('~') : challengetextEX.Split('-');
                                                            string roundEX = "";
                                                        }
                                                        @if (strEX[1] == "1")
                                                        {
                                                            int rd = Convert.ToInt32(strEX[1]) + 1;
                                                            roundEX = "Round-" + rd;
                                                        }
                                                        else if (Convert.ToInt32(strEX[1]) > 1)
                                                        {
                                                            int rd = Convert.ToInt32(strEX[1]) + 1;
                                                            roundEX = "Round-" + rd;
                                                        }

                                                        @if (challengetextEX.Contains("Round"))
                                                        {
                                                            <div class="input-group">
                                                                <span class="input-group-addon btn btn-default" id="sizing-addon1">
                                                                    <input type="checkbox" class="use-address" name="case[]" id="chkEXPE_@j">
                                                                    <label id="lblroundEXnew_@j" style="font-size:12px;">@roundEX</label>
                                                                    <label id="lblroundEX_@j" hidden>@strEX[0]-@strEX[1]</label>
                                                                </span>

                                                                <textarea class="form-control custom-control" style="resize:both;" rows="2" id="txtAccountTypeEX_@j" onkeydown="AutoFillAccountTypeEX(@j)"
                                                                          name="txtAccountTypeEX_@j" placeholder="Select account type or enter own challenge text"></textarea>
                                                                <label id="lblChallengeTextEX_@j"></label>
                                                            </div>
                                                        }
                                                    </td>
                                                }

                                                //EQUIFAX challenge text dropdown
                                                if (item.EQUIFAX == "" || item.EQUIFAX == "-")
                                                {
                                                    <td></td>
                                                }
                                                else if (item.EQUIFAX == "" || item.EQUIFAX == "0")
                                                {
                                                    string roundeq = "Round-1";
                                                    <td>

                                                        <div class="input-group">
                                                            <span class="input-group-addon btn btn-default" id="sizing-addon1">
                                                                <input type="checkbox" class="use-address" name="case[]" id="chkEQUI_@j">
                                                                <label id="lblroundEQnew_@j" style="font-size:12px;">@roundeq</label>
                                                            </span>
                                                            @*<input type="text" class="form-control" placeholder="Select account type or enter own challenge text"
                                aria-describedby="sizing-addon1" id="txtAccountTypeEQ_@j" onkeydown="AutoFillAccountTypeEQ(@j)"
                                name="txtAccountTypeEQ_@j" style="height:43px;">*@

                                                            <textarea class="form-control custom-control" style="resize:both;" rows="2" id="txtAccountTypeEQ_@j" onkeydown="AutoFillAccountTypeEQ(@j)"
                                                                      name="txtAccountTypeEQ_@j" placeholder="Select account type or enter own challenge text"></textarea>
                                                            <label id="lblChallengeTextEQ_@j"></label>
                                                        </div>
                                                    </td>
                                                }
                                                else if (!string.IsNullOrEmpty(@item.EQUIFAX))
                                                {
                                                    <td>
                                                        @{
                                                            string challengetextEQ = @item.EQUIFAX;
                                                            string[] strEQ = challengetextEQ.Contains("~") ?  challengetextEQ.Split('~') : challengetextEQ.Split('-');
                                                            string roundEQ = "";
                                                        }
                                                        @if (strEQ[1] == "1")
                                                        {
                                                            int rd = Convert.ToInt32(strEQ[1]) + 1;
                                                            roundEQ = "Round-" + rd;
                                                        }
                                                        else if (Convert.ToInt32(strEQ[1]) > 1)
                                                        {
                                                            int rd = Convert.ToInt32(strEQ[1]) + 1;
                                                            roundEQ = "Round-" + rd;
                                                        }
                                                        @if (challengetextEQ.Contains("Round"))
                                                        {
                                                            <div class="input-group">
                                                                <span class="input-group-addon" id="sizing-addon1">
                                                                    <input type="checkbox" class="use-address" name="case[]" id="chkEQUI_@j">
                                                                    <label id="lblroundEXnew_@j" style="font-size:12px;">@roundEQ</label>
                                                                    <label id="lblroundEQ_@j" hidden>@strEQ[0]-@strEQ[1]</label>
                                                                </span>
                                                                @*<input type="text" id="txtAccountTypeEQ_@j" class="form-control" aria-describedby="sizing-addon1"
                                    placeholder="Select account type or enter own challenge text" name="txtAccountTypeEQ_@j"
                                    onkeydown="AutoFillAccountTypeEQ(@j);" style="height:43px;" />*@

                                                                <textarea style="resize:both;" class="form-control custom-control" rows="2" id="txtAccountTypeEQ_@j" onkeydown="AutoFillAccountTypeEQ(@j)"
                                                                          name="txtAccountTypeEQ_@j" placeholder="Select account type or enter own challenge text"></textarea>
                                                                <label id="lblChallengeTextEQ_@j"></label>
                                                            </div>
                                                        }
                                                    </td>
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                if (item.Heading != "CreditreportId")
                                                                {

                                                                    string[] str = null;

                                                                    string negativeitemTU = "0";
                                                                    string negativeitemEX = "0";
                                                                    string negativeitemEQ = "0";

                                                                    string statusTU = item.TRANSUNION;
                                                                    string statusEX = item.EXPERIAN;
                                                                    string statusEQ = item.EQUIFAX;
                                                                    if (i == 11)
                                                                    {

                                                                        if (item.TRANSUNION != "-")
                                                                        {
                                                                            if(item.TRANSUNION.Contains("~"))
                                                                            {
                                                                                str = item.TRANSUNION.Split('~');
                                                                                string late = string.Empty;
                                                                                late = string.IsNullOrEmpty(str[2]) ? "" : " ( " + str[2] + " ) ";
                                                                                statusTU = str[0] + late;
                                                                                negativeitemTU = str[1];
                                                                            }
                                                                            else
                                                                            {
                                                                                statusTU= item.TRANSUNION;
                                                                            }

                                                                        }

                                                                        if (item.EXPERIAN != "-")
                                                                        {
                                                                            if (item.EXPERIAN.Contains("~"))
                                                                            {
                                                                                str = item.EXPERIAN.Split('~');
                                                                                string late = string.Empty;
                                                                                late = string.IsNullOrEmpty(str[2]) ? "" : " ( " + str[2] + " ) ";
                                                                                statusEX = str[0] + late;
                                                                                negativeitemEX = str[1];
                                                                            }
                                                                            else
                                                                            {
                                                                                statusEX = item.EXPERIAN;
                                                                            }
                                                                        }

                                                                        if (item.EQUIFAX != "-")
                                                                        {
                                                                            if (item.EQUIFAX.Contains("~"))
                                                                            {
                                                                                str = item.EQUIFAX.Split('~');
                                                                                string late = string.Empty;
                                                                                late = string.IsNullOrEmpty(str[2]) ? "" : " ( " + str[2] + " ) ";
                                                                                statusEQ = str[0] + late;
                                                                                negativeitemEQ = str[1];
                                                                            }
                                                                            else
                                                                            {
                                                                                statusEQ = item.EQUIFAX;
                                                                            }
                                                                        }

                                                                    }

                                                                    //showing Late 30 Days challenge text in red background
                                                                    if (negativeitemTU != "0" && i == 11)
                                                                    {
                                                    <td style="background-color:red;color:white">@statusTU</td>
                                                }
                                                else
                                                {
                                                    <td>@statusTU</td>
                                                }
                                                if (negativeitemEX != "0" && i == 11)
                                                {
                                                    <td style="background-color:red;color:white">@statusEX</td>
                                                }
                                                else
                                                {
                                                    <td>@statusEX</td>
                                                }
                                                if (negativeitemEQ != "0" && i == 11)
                                                {
                                                    <td style="background-color:red;color:white">@statusEQ</td>
                                                }
                                                else
                                                {
                                                    <td>@statusEQ</td>
                                                }

                                            }


                                        }


                                    }
                                </tr>

                                        i++;
                                        j++;
                                        if (i == 14)
                                        {
                                            <lable id="hdnEXPECreditRepItemId_@j" hidden>@item.EXPERIAN</lable>
                                            <lable id="hdnEQUICreditRepItemId_@j" hidden>@item.EQUIFAX</lable>
                                            <lable id="hdnTRANSCreditRepItemId_@j" hidden>@item.TRANSUNION</lable>
                                        }

                                        if (i == 14)
                                        {
                                            <tr>
                                                <td> </td>
                                                <td> </td>
                                                <td> </td>
                                                <td> </td>
                                            </tr>
                                            i = 0;
                                        }

                                    }



                                }

                            </tbody>

                        </table>
                    </div>
                </div>


                @*anothertablae*@
                <div class="row" style="padding-bottom:12px;">
                    <span class="pull-left"><h5>Inquiries</h5></span>
                    @if (role.ToUpper() != "CLIENT")
                    {
                        <span class="pull-right">
                            <button class="btn btn-secondary" id="AddInquiriesChallenge">Create Challenge</button>
                        </span>
                    }
                </div>

                <div class="row">
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th width="20%"></th>
                                    @*<th width="23%" style="text-align:center;background-color:#DAB96A;color:#fff;">TransUnion</th>
                                        <th width="23%" style="text-align:center;background-color:#98BDC5;color:#fff;">Experian</th>
                                        <th width="23%" style="text-align:center;background-color:#CBD06C;color:#fff;">Equifax</th>*@

                                    <th width="23%" style="text-align:center;background-color:#00A6CA;color:#fff;">TransUnion</th>
                                    <th width="23%" style="text-align:center;background-color:#93267D;color:#fff;">Experian</th>
                                    <th width="23%" style="text-align:center;background-color:#981e32;color:#fff;">Equifax</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (ViewBag.Inquires != null)
                                {
                                    var i = 0;
                                    var j = 0;


                                    foreach (var item in ViewBag.Inquires)
                                    {
                                        <tr>

                                            @if (role.ToUpper() != "CLIENT" && item.Heading != "CreditInqId" && item.Heading != "Challenge Status")
                                            {
                                                //displaying all headings except creditreportid for agent
                                                <td class="tdClass">@item.Heading</td>
                                            }
                                            else
                                            {
                                                //displaying all headings except Challenge and creditreportid for client
                                                if (item.Heading != "Challenge" && item.Heading != "CreditInqId" && item.Heading != "Challenge Status")
                                                {
                                                    <td class="tdClass">@item.Heading</td>
                                                }
                                            }
                                            @if (i == 0)
                                            {

                                                //bank name bold color
                                                <td style="font-weight:600">@item.TRANSUNION</td>
                                                <td style="font-weight:600">@item.EXPERIAN</td>
                                                <td style="font-weight:600">@item.EQUIFAX</td>
                                            }
                                            else
                                            {

                                                if (i == 4)
                                                {
                                                    if (role.ToUpper() != "CLIENT")
                                                    {

                                                        //transunion challenge text dropdown

                                                        if (item.TRANSUNION == "" || item.TRANSUNION == "-")
                                                        {
                                                            string roundtu = "Round-1";
                                                            <td>
                                                                <div class="input-group">
                                                                    <span class="input-group-addon btn btn-default" id="sizing-addon1"> <input type="checkbox" class="use-address" name="case[]" id="chkInquiriesTRANS_@j"> <label id="lblroundITUnew_@j" style="font-size:12px;">@roundtu</label></span>


                                                                    <textarea style="resize:both;" rows="2" class="form-control custom-control" id="TRANSInquiriesChallenge_@j" onkeydown="AutoFillInquiriesAccountTypeTU(@j)"
                                                                              name="TRANSInquiriesChallenge_@j" placeholder="Select account type or enter own challenge text"></textarea>
                                                                </div>
                                                            </td>
                                                        }
                                                        else if (!string.IsNullOrEmpty(@item.TRANSUNION))
                                                        {
                                                            <td>
                                                                @{
                                                                    string challengetextTU = @item.TRANSUNION;
                                                                    string[] strTU = challengetextTU.Split('-');
                                                                    string roundTU = "";
                                                                }
                                                                @if (strTU[1] == "1")
                                                                {
                                                                    int rd = Convert.ToInt32(strTU[1]) + 1;
                                                                    roundTU = "Round-" + rd;
                                                                }
                                                                else if (Convert.ToInt32(strTU[1]) > 1)
                                                                {
                                                                    int rd = Convert.ToInt32(strTU[1]) + 1;
                                                                    roundTU = "Round-" + rd;
                                                                }

                                                                <div class="input-group">
                                                                    <span class="input-group-addon btn btn-default" id="sizing-addon1"> <input type="checkbox" class="use-address" name="case[]" id="chkInquiriesTRANS_@j">  <label id="lblroundITUnew_@j" style="font-size:12px;">@roundTU</label></span>
                                                                    @*<input type="text" class="form-control" placeholder="Select account type or enter own challenge text"
                                                                        id="TRANSInquiriesChallenge_@j" onkeydown="AutoFillInquiriesAccountTypeTU(@j)"
                                                                        name="TRChallenge" style="height:43px;" />*@

                                                                    <textarea style="resize:both;" rows="2" class="form-control custom-control" id="TRANSInquiriesChallenge_@j" onkeydown="AutoFillInquiriesAccountTypeTU(@j)"
                                                                              name="TRANSInquiriesChallenge_@j" placeholder="Select account type or enter own challenge text"></textarea>
                                                                </div>
                                                                <label id="lblroundITU_@j" hidden>@strTU[0]-@strTU[1]</label>

                                                            </td>
                                                        }


                                                        //EXPERIAN challenge text dropdown

                                                        if (item.EXPERIAN == "" || item.EXPERIAN == "-")
                                                        {
                                                            string roundex = "Round-1";
                                                            <td>
                                                                <div class="input-group">
                                                                    <span class="input-group-addon btn btn-default" id="sizing-addon1"> <input type="checkbox" class="use-address" name="case[]" id="chkInquiriesEXPE_@j"> <label id="lblroundITUnew_@j" style="font-size:12px;">@roundex</label></span>
                                                                    @*<input type="text" class="form-control" placeholder="Select account type or enter own challenge text"
                                                                        aria-describedby="sizing-addon1" id="EXPEInquiriesChallenge_@j"
                                                                        onkeydown="AutoFillInquiriesAccountTypeEX(@j)" name="TRChallenge" style="height:43px;">*@

                                                                    <textarea style="resize:both;" rows="2" class="form-control custom-control" id="EXPEInquiriesChallenge_@j" onkeydown="AutoFillInquiriesAccountTypeEX(@j)"
                                                                              name="EXPEInquiriesChallenge_@j" placeholder="Select account type or enter own challenge text"></textarea>
                                                                </div>
                                                            </td>

                                                        }
                                                        else if (!string.IsNullOrEmpty(@item.EXPERIAN))
                                                        {
                                                            <td>
                                                                @{
                                                                    string challengetextEX = @item.EXPERIAN;
                                                                    string[] strEX = challengetextEX.Split('-');
                                                                    string roundEX = "";
                                                                }
                                                                @if (strEX[1] == "1")
                                                                {
                                                                    int rd = Convert.ToInt32(strEX[1]) + 1;
                                                                    roundEX = "Round-" + rd;
                                                                }
                                                                else if (Convert.ToInt32(strEX[1]) > 1)
                                                                {
                                                                    int rd = Convert.ToInt32(strEX[1]) + 1;
                                                                    roundEX = "Round-" + rd;
                                                                }

                                                                <div class="input-group">
                                                                    <span class="input-group-addon btn btn-default" id="sizing-addon1"> <input type="checkbox" class="use-address" name="case[]" id="chkInquiriesEXPE_@j">  <label id="lblroundIEXnew_@j" style="font-size:12px;">@roundEX</label></span>
                                                                    @*<input type="text" class="form-control" placeholder="Select account type or enter own challenge text"
                                                                        id="EXPEInquiriesChallenge_@j" onkeydown="AutoFillInquiriesAccountTypeEX(@j)"
                                                                        name="TRChallenge" style="height:43px;" />*@


                                                                    <textarea style="resize:both;" rows="2" class="form-control custom-control" id="EXPEInquiriesChallenge_@j" onkeydown="AutoFillInquiriesAccountTypeEX(@j)"
                                                                              name="EXPEInquiriesChallenge_@j" placeholder="Select account type or enter own challenge text"></textarea>
                                                                </div>
                                                                <label id="lblroundIEX_@j" hidden>@strEX[0]-@strEX[1]</label>
                                                            </td>
                                                        }

                                                        //EQUIFAX challenge text dropdown

                                                        if (item.EQUIFAX == "" || item.EQUIFAX == "-")
                                                        {
                                                            string roundeq = "Round-1";
                                                            <td>
                                                                <div class="input-group">
                                                                    <span class="input-group-addon btn btn-default" id="sizing-addon1"> <input type="checkbox" class="use-address" name="case[]" id="chkInquiriesEQUI_@j"> <label id="lblroundIEQnew_@j" style="font-size:12px;">@roundeq</label></span>
                                                                    @*<input type="text" class="form-control" placeholder="Select account type or enter own challenge text"
                                                                        aria-describedby="sizing-addon1" id="EQUIInquiriesChallenge_@j"
                                                                        onkeydown="AutoFillInquiriesAccountTypeEQ(@j)" name="TRChallenge" style="height:43px;">*@

                                                                    <textarea style="resize:both;" rows="2" class="form-control custom-control" id="EQUIInquiriesChallenge_@j" onkeydown="AutoFillInquiriesAccountTypeEQ(@j)"
                                                                              name="EQUIInquiriesChallenge_@j" placeholder="Select account type or enter own challenge text"></textarea>
                                                                </div>
                                                            </td>
                                                        }
                                                        else if (!string.IsNullOrEmpty(@item.EQUIFAX))
                                                        {
                                                            <td>
                                                                @{
                                                                    string challengetextEQ = @item.EQUIFAX;
                                                                    string[] strEQ = challengetextEQ.Split('-');
                                                                    string roundEQ = "";
                                                                }

                                                                @if (strEQ[1] == "1")
                                                                {
                                                                    int rd = Convert.ToInt32(strEQ[1]) + 1;
                                                                    roundEQ = "Round-" + rd;
                                                                }
                                                                else if (Convert.ToInt32(strEQ[1]) > 1)
                                                                {
                                                                    int rd = Convert.ToInt32(strEQ[1]) + 1;
                                                                    roundEQ = "Round-" + rd;
                                                                }
                                                                <div class="input-group">
                                                                    <span class="input-group-addon btn btn-default" id="sizing-addon1"> <input type="checkbox" class="use-address" name="case[]" id="chkInquiriesEQUI_@j">  <label id="lblroundIEQnew_@j" style="font-size:12px;">@roundEQ</label></span>
                                                                    @*<input type="text" class="form-control" placeholder="Select account type or enter own challenge text"
                                                                        id="EQUIInquiriesChallenge_@j" onkeydown="AutoFillInquiriesAccountTypeEQ(@j)"
                                                                        name="TRChallenge" style="height:43px;" />*@

                                                                    <textarea style="resize:both;" rows="2" class="form-control custom-control" id="EQUIInquiriesChallenge_@j" onkeydown="AutoFillInquiriesAccountTypeEQ(@j)"
                                                                              name="EQUIInquiriesChallenge_@j" placeholder="Select account type or enter own challenge text"></textarea>
                                                                </div>
                                                                <label id="lblroundIEQ_@j" hidden>@strEQ[0]-@strEQ[1]</label>


                                                            </td>
                                                        }
                                                    }

                                                }
                                                else
                                                {
                                                    if (item.Heading != "CreditInqId" && item.Heading != "Challenge Status")
                                                    {
                                                        <td>@item.TRANSUNION</td>
                                                        <td>@item.EXPERIAN</td>
                                                        <td>@item.EQUIFAX</td>
                                                    }
                                                }

                                            }
                                        </tr>

                                        i++;
                                        j++;
                                        if (i == 6)
                                        {
                                            <lable id="hdnEXPECreditInqId_@j" hidden>@item.EXPERIAN</lable>
                                            <lable id="hdnEQUICreditInqId_@j" hidden>@item.EQUIFAX</lable>
                                            <lable id="hdnTRANSCreditInqId_@j" hidden>@item.TRANSUNION</lable>
                                        }

                                        if (i == 6)
                                        {
                                            <tr>
                                                <td> </td>
                                                <td> </td>
                                                <td> </td>
                                                <td> </td>
                                            </tr>
                                            i = 0;
                                        }

                                    }



                                }

                            </tbody>

                        </table>
                    </div>
                </div>
                @*nsdfl*@

            </div>
        </div>

    </div>
</div>

<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.10.0.min.js" type="text/javascript"></script>
<script src="https://ajax.aspnetcdn.com/ajax/jquery.ui/1.9.2/jquery-ui.min.js" type="text/javascript"></script>
<link href="https://ajax.aspnetcdn.com/ajax/jquery.ui/1.9.2/themes/blitzer/jquery-ui.css"
      rel="Stylesheet" type="text/css" />
<script>
    $(document).ready(function () {
        $(".loader1").hide();
        $("#overlay").hide();
        
        @*var items=@Html.Raw(Json.Encode(ViewBag.challenges));
        for (var i = 0; i < items.length; i++) {
            if ($('trLoan_' + i).find('td:eq(3)').length == 0) {
                $('trLoan_' + i).hide();
            }
        }*@
        var Status = '@ViewBag.Status';
        var Round = '@ViewBag.Round';
        if (Round == 'Third Round') {
            if (Status=='true') {
                $("#RefreshCreditPull").attr("disabled", true);
                $("#AddChallenge").attr("disabled", true);
                $("#AddInquiriesChallenge").attr("disabled", true);
            }
        }

        disableChallengetxtAH();
        disableChallengetxtINQ();

        $("#TUPastDueDays").keypress(function (e) {
            debugger
            var keyCode = e.keyCode || e.which;

            //Regex for Valid Characters i.e. Numbers.
            var regex = /^[0-9]+$/;

            //Validate TextBox value against the Regex.
            var isValid = regex.test(String.fromCharCode(keyCode));
            if (!isValid) {
                Swal.fire('Warning', 'Only Numbers allowed.', 'warning');
            }
            return isValid;
        });
        $("#EXPastDueDays").keypress(function (e) {
            debugger
            var keyCode = e.keyCode || e.which;

            //Regex for Valid Characters i.e. Numbers.
            var regex = /^[0-9]+$/;

            //Validate TextBox value against the Regex.
            var isValid = regex.test(String.fromCharCode(keyCode));
            if (!isValid) {
                Swal.fire('Warning', 'Only Numbers allowed.', 'warning');
            }
            return isValid;
        });
        $("#EQPastDueDays").keypress(function (e) {
            debugger
            var keyCode = e.keyCode || e.which;

            //Regex for Valid Characters i.e. Numbers.
            var regex = /^[0-9]+$/;

            //Validate TextBox value against the Regex.
            var isValid = regex.test(String.fromCharCode(keyCode));
            if (!isValid) {
                Swal.fire('Warning', 'Only Numbers allowed.', 'warning');
            }
            return isValid;
        });
    });
    var getUrlParameter = function getUrlParameter(sParam) {
        var sPageURL = window.location.search.substring(1),
            sURLVariables = sPageURL.split('&'),
            sParameterName,
            i;
        for (i = 0; i < sURLVariables.length; i++) {
            sParameterName = sURLVariables[i].split('=');

            if (sParameterName[0] === sParam) {
                return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
            }
        }
    };
    var Id = getUrlParameter('ClientId');
    var from = getUrlParameter('from');
	var role = @Html.Raw(Json.Encode(ViewBag.Role))
    //Creating Account History Challenges
        $("#AddChallenge").click(function () {
        debugger;
        var ClientId = getUrlParameter('ClientId');
            try {
                var tuLoanStatus = $("#TULoanStatus").val();
                var exLoanStatus = $("#EXLoanStatus").val();
                var eqLoanStatus = $("#EQLoanStatus").val();
            var items=@Html.Raw(Json.Encode(ViewBag.challenges));
            var i = 0;

            var AllAgenciesvalues = new Array();
            for (var i = 0; i < items.length; i++) {
                var j = i + 14;
                var hdnEQUICreditRepItemId = $("#hdnEQUICreditRepItemId_" + j).text();
                var hdnEXPECreditRepItemId = $("#hdnEXPECreditRepItemId_" + j).text();
                var hdnTRANSCreditRepItemId = $("#hdnTRANSCreditRepItemId_" +j).text();

                var l = i + 12;
                var lblroundTU_ = $("#lblroundTU_" + l).text();
                var lblroundEX_ = $("#lblroundEX_" + l).text();
                var lblroundEQ_ = $("#lblroundEQ_" + l).text();

                var txtAccountTypeEX = $("#txtAccountTypeEX_" + l).val();
                var txtAccountTypeTU = $("#txtAccountTypeTU_" + l).val();
                var txtAccountTypeEQ = $("#txtAccountTypeEQ_" + l).val();

                try {
                    var m = i + 9; //LoanStatus
                    var TULoanStatus = $("#TULoanStatus_" + m).val();
                    var EXLoanStatus = $("#EXLoanStatus_" + m).val();
                    var EQLoanStatus = $("#EQLoanStatus_" + m).val();

                    var n = i + 10;//PastDue
                    var TUPastDueDays = $("#TUPastDueDays_" + n).val();
                    var EXPastDueDays = $("#EXPastDueDays_" + n).val();
                    var EQPastDueDays = $("#EQPastDueDays_" + n).val();
                } catch (e) {

                }
                var c = i + 12;
                //EX
                var AllAccountTypes =@Html.Raw(Json.Encode(ViewBag.AllAccountTypes));
                var flag = false;
                try {
                    if (hdnEXPECreditRepItemId != "" && $("#chkEXPE_" + c).prop("checked") == true) {

                        if (txtAccountTypeEX != "") {
                            // Commented by satish
                            //for (var x = 0; x < AllAccountTypes.length; x++) {
                            //    var stritem = AllAccountTypes[x].toUpperCase();

                            //    if (stritem == txtAccountTypeEX.toUpperCase()) {
                            //        AllAgenciesvalues.push({

                            //            'CredRepItemsId': hdnEXPECreditRepItemId,
                            //            'AccountType': txtAccountTypeEX,
                            //            'RoundType': lblroundEX_,
                            //        });
                            //        flag = true;
                            //    }
                            //}
                            //if (flag == false) {
                            //    $("#txtAccountTypeEX_" + c).focus();
                            //    Swal.fire("Warning!", "Wrong Account Type !", 'warning');
                            //    return false;
                            //}
                            //
                            if (txtAccountTypeEX == "EDUCATION") {
                                if (EXLoanStatus == "0") {
                                    $("#EXLoanStatus_" + m).focus();
                                    Swal.fire("Warning!", "Please select Loan status.", 'warning');
                                    
                                    return false;
                                }
                                if (EXPastDueDays == "") {
                                    $("#EXPastDueDays_" + n).focus();
                                    Swal.fire("Warning!", "Please enter Past due days.", 'warning');
                                    
                                    return false;
                                }
                                else {
                                    if (parseInt(EXPastDueDays) <= 0) {
                                        $("#EXPastDueDays_" + n).focus();
                                        Swal.fire("Warning!", "Please enter valid Past due days.", 'warning');
                                        
                                        return false;
                                    }
                                }
                            }
                            
                            AllAgenciesvalues.push({

                                'CredRepItemsId': hdnEXPECreditRepItemId,
                                'AccountType': txtAccountTypeEX,
                                'RoundType': lblroundEX_,
                                'LoanStatus': EXLoanStatus,
                                'PastDueDays': EXPastDueDays,
                            });
                            flag = true;
                        }
                        else {
                            $("#txtAccountTypeEX_" + c).focus();
                            Swal.fire("Warning!", "Please select Account Type !", 'warning');
                            return false;
                        }

                    }
                    else {
                        if (hdnEXPECreditRepItemId != "" && $("#chkEXPE_" + c).prop("checked") == false && txtAccountTypeEX != "") {
                            $("#txtAccountTypeEX_" + c).focus();
                            Swal.fire("Warning!", "Please check challenge !", 'warning');
                            return false;
                        }
                    }
                } catch (e) {
                }
                //TU
                var flag = false;
                try {
                    if (hdnTRANSCreditRepItemId != "" && $("#chkTRANS_" + c).prop("checked") == true) {

                        if (txtAccountTypeTU != "") {
                            //Commented by satish
                            //    for (var x = 0; x < AllAccountTypes.length; x++) {
                            //    var stritem = AllAccountTypes[x].toUpperCase();

                            //    if (stritem == txtAccountTypeTU.toUpperCase()) {
                            //        AllAgenciesvalues.push({

                            //            'CredRepItemsId': hdnTRANSCreditRepItemId,
                            //            'AccountType': txtAccountTypeTU,
                            //            'RoundType': lblroundTU_,
                            //        });
                            //        flag = true;
                            //    }
                            // }
                            // if (flag == false) {
                            //    $("#txtAccountTypeTU_" + c).focus();
                            //    Swal.fire("Warning!", "Wrong Account Type !", 'warning');
                            //    return false;
                            //}

                               
                            // if (flag == false) {
                            //    $("#txtAccountTypeTU_" + c).focus();
                            //    Swal.fire("Warning!", "Wrong Account Type !", 'warning');
                            //    return false;
                            //}

                            
                            if (txtAccountTypeTU == "EDUCATION") {
                                if (TULoanStatus == "0") {
                                    $("#TULoanStatus_" + m).focus();
                                    Swal.fire("Warning!", "Please select Loan status.", 'warning');

                                    return false;
                                }
                                if (TUPastDueDays == "") {
                                    $("#TUPastDueDays_" + n).focus();
                                    Swal.fire("Warning!", "Please enter Past due days.", 'warning');

                                    return false;
                                }
                                else {
                                    if (parseInt(TUPastDueDays) <= 0) {
                                        $("#TUPastDueDays_" + n).focus();
                                        Swal.fire("Warning!", "Please enter valid Past due days.", 'warning');

                                        return false;
                                    }
                                }
                            }
                            AllAgenciesvalues.push({

                                'CredRepItemsId': hdnTRANSCreditRepItemId,
                                'AccountType': txtAccountTypeTU,
                                'RoundType': lblroundTU_,
                                'LoanStatus': TULoanStatus,
                                'PastDueDays': TUPastDueDays,
                            });
                            flag = true;

                        }
                        else {
                            $("#txtAccountTypeTU_" + c).focus();
                            Swal.fire("Warning!", "Please select Account Type !", 'warning');
                            return false;
                        }
                    }
                    else {
                        if (hdnTRANSCreditRepItemId != "" && $("#chkTRANS_" + c).prop("checked") == false && txtAccountTypeTU != "") {
                            $("#txtAccountTypeTU_" + c).focus();
                            Swal.fire("Warning!", "Please check challenge !", 'warning');
                            return false;
                        }

                    }
                } catch (e) {
                }
                //EQ
                var flag = false;
                try {
                    if (hdnEQUICreditRepItemId != "" && $("#chkEQUI_" + c).prop("checked") == true) {

                        if (txtAccountTypeEQ != "") {
                            //    for (var x = 0; x < AllAccountTypes.length; x++) {
                            //    var stritem = AllAccountTypes[x].toUpperCase();

                            //    if (stritem == txtAccountTypeEQ.toUpperCase()) {
                            //        AllAgenciesvalues.push({

                            //            'CredRepItemsId': hdnEQUICreditRepItemId,
                            //            'AccountType': txtAccountTypeEQ,
                            //            'RoundType': lblroundEQ_,
                            //        });
                            //        flag = true;
                            //    }
                            //}
                            //if (flag == false) {
                            //    $("#txtAccountTypeEQ_" + c).focus();
                            //    Swal.fire("Warning!", "Wrong Account Type !", 'warning');
                            //    return false;
                            //    }
                            if (txtAccountTypeEQ == "EDUCATION") {
                                if (EQLoanStatus == "0") {
                                    $("#EQLoanStatus_" + m).focus();
                                    Swal.fire("Warning!", "Please select Loan status.", 'warning');

                                    return false;
                                }
                                if (EQPastDueDays == "") {
                                    $("#EQPastDueDays_" + n).focus();
                                    Swal.fire("Warning!", "Please enter Past due days.", 'warning');

                                    return false;
                                }
                                else {
                                    if (parseInt(EQPastDueDays) <= 0) {
                                        $("#EQPastDueDays_" + n).focus();
                                        Swal.fire("Warning!", "Please enter valid Past due days.", 'warning');

                                        return false;
                                    }
                                }
                            }
                            AllAgenciesvalues.push({

                                'CredRepItemsId': hdnEQUICreditRepItemId,
                                'AccountType': txtAccountTypeEQ,
                                'RoundType': lblroundEQ_,
                                'LoanStatus': EQLoanStatus,
                                'PastDueDays': EQPastDueDays,
                            });
                            flag = true;
                        }
                        else {
                            $("#txtAccountTypeEQ_" + c).focus();
                            Swal.fire("Warning!", "Please select Account Type !", 'warning');
                            return false;
                        }
                    }
                    else {
                        if (hdnEQUICreditRepItemId != "" && $("#chkEQUI_" + c).prop("checked") == false && txtAccountTypeEQ != "") {
                            $("#txtAccountTypeEQ_" + c).focus();
                            Swal.fire("Warning!", "Please check challenge !", 'warning');
                            return false;
                        }

                    }
                } catch (e) {
                }
            }


            if (AllAgenciesvalues.length == 0)
            {
                debugger
                Swal.fire("Warning!", "Please select challenge !", 'warning');
                return false;
            }

            var values = new Array();
            var ClientId = getUrlParameter('ClientId');
            var res = 0;
            values.push(@Html.Raw(Json.Encode(ViewBag.AgentName)));
            values.push(@Html.Raw(Json.Encode(ViewBag.Cname)));
            values.push(@Html.Raw(Json.Encode(ViewBag.DateReportPulls)));
            values.push(@Html.Raw(Json.Encode(ViewBag.Round)));

        $(".loader1").show();
        $("#overlay").show();
            //debugger;
        $.ajax({
            method: "POST",
            url: "/Client/ClientChallengeform",
            dataType: "json",
            data: { credit: AllAgenciesvalues, Id: ClientId, values: values },
            success: function (data) {
                //debugger;
                if (data == true) {
                    $(".loader1").hide();
                    $("#overlay").hide();
                    Swal.fire({
                        title: "Success!",
                        text: "Challenge created successfully.!",
                        type: 'success',
                    }).then(function () {
                        if (from == "db")
                        {
                            if (role == "agentadmin")
                            {
								//window.location.href = "/dashboard/agent";
								window.location.href = "/Agent/Challenges?ClientId="+ Id;
                            }
                            else if (role == "agentstaff")
                            {
								//window.location.href = "/dashboard/staff";
                                window.location.href = "/Agent/Challenges?ClientId="+ Id;
							}
                        }
                        else
                        {
                           window.location.href = "/Client/CreditItems?ClientId=" + Id;
                        }
                    })
                }
                else {
                    $(".loader1").hide();
                    $("#overlay").hide();
                    location.reload();
                }
            }
        });
        } catch (e) {
            location.href="/Account/SignIn"
        }



    });


    //Creating Inquiries Challenges
    $("#AddInquiriesChallenge").click(function () {
            debugger;
            var items=@Html.Raw(Json.Encode(ViewBag.Inquires));
            var i = 0;

            var AllAgenciesvalues = new Array();

            for (var i = 0; i < items.length; i++) {

                var j = i + 4;
                //Reading  Inquiries challenge text from Inquiries table


                var TRANSAccountType = $("#TRANSInquiriesChallenge_" + j).val();
                var EXPEAccountType = $("#EXPEInquiriesChallenge_" + j).val();
                var EQUIAccountType = $("#EQUIInquiriesChallenge_" + j).val();

                //Reading  CreditInqId from  Inquiries table
               var k = i + 6;


                var hdnTRANSCreditInqId = $("#hdnTRANSCreditInqId_" + k).text();
                var hdnEXPECreditInqId = $("#hdnEXPECreditInqId_" + k).text();
                var hdnEQUICreditInqId = $("#hdnEQUICreditInqId_" + k).text();


                var lblroundITU_ = $("#lblroundITU_" + j).text();
                var lblroundEX_ = $("#lblroundIEX_" + j).text();
                var lblroundEQ_ = $("#lblroundIEQ_" + j).text();



                  var AllAccountTypes =@Html.Raw(Json.Encode(ViewBag.AllAccountTypes));
                //TU
                 var flag = false;
                 if (hdnTRANSCreditInqId != ""  && $("#chkInquiriesTRANS_" + j).prop("checked") == true) {

                     if (TRANSAccountType != "") {
                         //Commented by satish
                        //    for (var x = 0; x < AllAccountTypes.length; x++) {
                        //    var stritem = AllAccountTypes[x].toUpperCase();

                        //    if (stritem == TRANSAccountType.toUpperCase()) {
                        //        AllAgenciesvalues.push({

                        //            'CreditInqId': hdnTRANSCreditInqId,
                        //            'AccountType': TRANSAccountType,
                        //            'RoundType': lblroundITU_,
                        //        });
                        //        flag = true;
                        //    }
                        //}
                        //if (flag == false) {
                        //    $("#TRANSInquiriesChallenge_" + j).focus();
                        //    Swal.fire("Warning!", "Wrong Account Type !", 'warning');
                        //    return false;
                        //}

                                  AllAgenciesvalues.push({

                                    'CreditInqId': hdnTRANSCreditInqId,
                                    'AccountType': TRANSAccountType,
                                    'RoundType': lblroundITU_,
                                });
                                flag = true;

                        }
                        else {
                            $("#TRANSInquiriesChallenge_" + j).focus();
                            Swal.fire("Warning!", "Please select Account Type !", 'warning');
                            return false;
                        }
                }
                 else {
                    if (hdnTRANSCreditInqId != "" && $("#chkInquiriesTRANS_" + j).prop("checked") == false && TRANSAccountType != "") {
                         $("#TRANSInquiriesChallenge_" + j).focus();
                             Swal.fire("Warning!", "Please check challenge !", 'warning');
                            return false;
                    }

                }

                //Ex
                 var flag = false;
                 if (hdnEXPECreditInqId != ""  && $("#chkInquiriesEXPE_" + j).prop("checked") == true) {

                     if (EXPEAccountType != "") {
                         //for (var x = 0; x < AllAccountTypes.length; x++) {
                         //    var stritem = AllAccountTypes[x].toUpperCase();

                         //    if (stritem == EXPEAccountType.toUpperCase()) {
                         //        AllAgenciesvalues.push({

                         //            'CreditInqId': hdnEXPECreditInqId,
                         //            'AccountType': EXPEAccountType,
                         //            'RoundType': lblroundEX_,
                         //        });
                         //        flag = true;
                         //    }
                         //}
                         //if (flag == false) {
                         //    $("#EXPEInquiriesChallenge_" + j).focus();
                         //    Swal.fire("Warning!", "Wrong Account Type !", 'warning');
                         //    return false;
                         //}
                         AllAgenciesvalues.push({

                             'CreditInqId': hdnEXPECreditInqId,
                             'AccountType': EXPEAccountType,
                             'RoundType': lblroundEX_,
                         });
                         flag = true;
                     }
                     else {
                         $("#EXPEInquiriesChallenge_" + j).focus();
                         Swal.fire("Warning!", "Please select Account Type !", 'warning');
                         return false;
                     }
                }
                 else {
                    if (hdnEXPECreditInqId != "" && $("#chkInquiriesEXPE_" + j).prop("checked") == false && EXPEAccountType != "") {
                         $("#EXPEInquiriesChallenge_" + j).focus();
                             Swal.fire("Warning!", "Please check challenge !", 'warning');
                            return false;
                    }

                }


                 //EQ
                 var flag = false;
                 if (hdnEQUICreditInqId != ""  && $("#chkInquiriesEQUI_" + j).prop("checked") == true) {


                     if (EQUIAccountType != "") {
                         //for (var x = 0; x < AllAccountTypes.length; x++) {
                         //    var stritem = AllAccountTypes[x].toUpperCase();

                         //    if (stritem == EQUIAccountType.toUpperCase()) {
                         //        AllAgenciesvalues.push({

                         //            'CreditInqId': hdnEQUICreditInqId,
                         //            'AccountType': EQUIAccountType,
                         //            'RoundType': lblroundEQ_,
                         //        });
                         //        flag = true;
                         //    }
                         //}
                         //if (flag == false) {
                         //    $("#EQUIInquiriesChallenge_" + j).focus();
                         //    Swal.fire("Warning!", "Wrong Account Type !", 'warning');
                         //    return false;
                         //}

                         AllAgenciesvalues.push({

                             'CreditInqId': hdnEQUICreditInqId,
                             'AccountType': EQUIAccountType,
                             'RoundType': lblroundEQ_,
                         });
                         flag = true;
                     }
                     else {
                         $("#EQUIInquiriesChallenge_" + j).focus();
                         Swal.fire("Warning!", "Please select Account Type !", 'warning');
                         return false;
                     }
                }
                 else {
                    if (hdnEQUICreditInqId != "" && $("#chkInquiriesEQUI_" + j).prop("checked") == false && EQUIAccountType != "") {
                         $("#EQUIInquiriesChallenge_" + j).focus();
                             Swal.fire("Warning!", "Please check challenge !", 'warning');
                            return false;
                    }

                    }
        }
        debugger;
        if (AllAgenciesvalues.length == 0)
        {
            debugger
                Swal.fire("Warning!", "Please select challenge !", 'warning');
                return false;
            }

            var values = new Array();
            var Id = getUrlParameter('ClientId');

            values.push(@Html.Raw(Json.Encode(ViewBag.AgentName)));
            values.push(@Html.Raw(Json.Encode(ViewBag.Cname)));
            values.push(@Html.Raw(Json.Encode(ViewBag.DateReportPulls)));
            values.push(@Html.Raw(Json.Encode(ViewBag.Round)));

        $(".loader1").show();
        $("#overlay").show();
            //debugger;
        $.ajax({
            method: "POST",
            url: "/Client/ClientChallengeInquiresform",
            dataType: "json",
            data: { credit: AllAgenciesvalues, Id: Id, values: values },
            success: function (data) {
                debugger;
                if (data == true) {
                    $(".loader1").hide();
                    $("#overlay").hide();
                    Swal.fire({
                        title: "Success!",
                        text: "Challenge created successfully.!",
                        type: 'success',
                    }).then(function () {
                        if (from == "db")
                        {
                            if (role == "agentadmin")
                            {
                                window.location.href = "/Agent/Challenges?ClientId="+ Id;
								//window.location.href = "/dashboard/agent";
                            }
                            else if (role == "agentstaff") {
                                //window.location.href = "/dashboard/staff";
                                window.location.href = "/Agent/Challenges?ClientId="+ Id;
							}
                        }
                        else
                        {
                           window.location.href = "/Client/CreditItems?ClientId=" + Id;
                        }
                    })
                }
                else {
                    $(".loader1").hide();
                    $("#overlay").hide();
                    location.reload();
                }
            }
        });


    });

    function refreshcreditpull() {
        try {
             $(".loader1").show();
                    $("#overlay").show();

                    $.ajax({
                        method: "POST",
                        url: "/Client/CheckIdentityIQInfo",
                        data: { clientId: Id },
                        dataType: "json",
                        success: function (data) {
                            //debugger;
                            if (data == true) {
                                $.ajax({
                                    method: "POST",
                                    url: "/Client/AddCreditReport?mode=reset&round=" + $("#hdnRound").val(),
                                    dataType: "json",
                                    data: { clientId: Id },
                                    success: function (data) {
                                        if (data == 0) {
                                            $(".loader1").hide();
                                            $("#overlay").hide();
                                            Swal.fire("Warning!", "Invalid Identity IQ details!", 'warning');
                                            return false;
                                        }
                                        //debugger;
                                        $(".loader1").hide();
                                        $("#overlay").hide();
                                        Swal.fire({
                                            title: "Success!",
                                            text: "Credit pull refreshed successfully.",
                                            type: 'success',

                                        }).then(function () {
                                            window.location.href = "/Client/CreditItems?ClientId=" + Id + "&from=db";
                                        })

                                    }
                                });
                            }
                            else {
                                Swal.fire({
                                    title: "Warning!",
                                    text: "Identity IQ Information not available.",
                                    type: 'warning',

                                }).then(function () {

                                })
                            }
                        }
                    });
        } catch (e) {

        }

    }


    $("#RefreshCreditPull").click(function () {
        debugger;

        //inquiries start
        var items=@Html.Raw(Json.Encode(ViewBag.Inquires));
            var i = 0;
            var AllAgenciesInquiresvalues = new Array();
            for (var i = 0; i < items.length; i++) {

                //Reading  Inquiries challenge text from Inquiries table
                    var EQUIChallenge = $("#EQUIInquiriesChallenge_" + i).val();
                    var EXPEChallenge = $("#EXPEInquiriesChallenge_" + i).val();
                    var TRANSChallenge = $("#TRANSInquiriesChallenge_" + i).val();

                //Reading  CreditInqId from  Inquiries table
                var k = i + 2;
                var hdnEQUICreditInqId = $("#hdnEQUICreditInqId_" + k).text();
                var hdnEXPECreditInqId = $("#hdnEXPECreditInqId_" + k).text();
                var hdnTRANSCreditInqId = $("#hdnTRANSCreditInqId_" + k).text();


                var isCheckboxdisabled = $('#chkInquiriesEQUI_' + i).is(':disabled');
                if (EQUIChallenge != "" && EQUIChallenge != undefined && hdnEQUICreditInqId != "" && isCheckboxdisabled == true) {

                    if ($("#chkInquiriesEQUI_" + i).prop("checked") == true) {
                        AllAgenciesInquiresvalues.push({
                            'ChallengeText': EQUIChallenge,
                            'CreditInqId': hdnEQUICreditInqId,
                        });
                    }
                }
                 var isCheckboxdisabled = $('#chkInquiriesEXPE_' + i).is(':disabled');
                if (EXPEChallenge != "" && EXPEChallenge != undefined && hdnEXPECreditInqId != "" && isCheckboxdisabled == true) {
                    //debugger;

                    if ($("#chkInquiriesEXPE_" + i).prop("checked") == true) {

                        AllAgenciesInquiresvalues.push({
                            'ChallengeText': EXPEChallenge,
                            'CreditInqId': hdnEXPECreditInqId,
                        });
                    }
                }
                var isCheckboxdisabled = $('#chkInquiriesTRANS_' + i).is(':disabled');
                if (TRANSChallenge != "" && TRANSChallenge != undefined && hdnTRANSCreditInqId != "" && isCheckboxdisabled == true) {

                    if ($("#chkInquiriesTRANS_" + i).prop("checked") == true) {
                        AllAgenciesInquiresvalues.push({
                            'ChallengeText': TRANSChallenge,
                            'CreditInqId': hdnTRANSCreditInqId,
                        });
                    }

                }

            }

        //inquies end


        //account historychallenge start
        var items=@Html.Raw(Json.Encode(ViewBag.challenges));
            var i = 0;
            var AllAgenciesvalues = new Array();
            for (var i = 0; i < items.length; i++) {

                    var EQUIChallenge = $("#EQUIChallenge_" + i).val();
                    var EXPEChallenge = $("#EXPEChallenge_" + i).val();
                    var TRANSChallenge = $("#TRANSChallenge_" + i).val();

                var k = i + 2;
                var hdnEQUICreditRepItemId = $("#hdnEQUICreditRepItemId_" + k).text();
                var hdnEXPECreditRepItemId = $("#hdnEXPECreditRepItemId_" + k).text();
                var hdnTRANSCreditRepItemId = $("#hdnTRANSCreditRepItemId_" + k).text();



                var isCheckboxdisabled = $('#chkEQUI_' + i).is(':disabled');
                if (EQUIChallenge != "" && EQUIChallenge != undefined && hdnEQUICreditRepItemId != "" && isCheckboxdisabled == true) {
                    debugger

                    if ($("#chkEQUI_" + i).prop("checked") == true) {
                        AllAgenciesvalues.push({
                            'Challenge': EQUIChallenge,
                            'CredRepItemsId': hdnEQUICreditRepItemId,
                        });
                    } else {
                        Swal.fire("Warning!", "Please check challenge !", 'warning');
                        return false;
                    }
                }

                 var isCheckboxdisabled = $('#chkEXPE_' + i).is(':disabled');
                if (EXPEChallenge != "" && EXPEChallenge != undefined && hdnEXPECreditRepItemId != "" && isCheckboxdisabled == true) {
                    //debugger;

                    if ($("#chkEXPE_" + i).prop("checked") == true) {

                        AllAgenciesvalues.push({
                            'Challenge': EXPEChallenge,
                            'CredRepItemsId': hdnEXPECreditRepItemId,
                        });
                    } else {
                        Swal.fire("Warning!", "Please check challenge !", 'warning');
                        return false;
                    }
                }

                var isCheckboxdisabled = $('#chkTRANS_' + i).is(':disabled');
                if (TRANSChallenge != "" && TRANSChallenge != undefined && hdnTRANSCreditRepItemId != "" && isCheckboxdisabled == true) {

                    if ($("#chkTRANS_" + i).prop("checked") == true) {
                        AllAgenciesvalues.push({
                            'Challenge': TRANSChallenge,
                            'CredRepItemsId': hdnTRANSCreditRepItemId,
                        });
                    } else {
                        Swal.fire("Warning!", "Please check challenge !", 'warning');
                        return false;
                    }
                }

            }
        //account historychallenge end


        if (AllAgenciesvalues.length > 0 || AllAgenciesInquiresvalues.length > 0) {
            debugger
            refreshcreditpull();
            // Swal.fire({
            //    title: 'Are you sure?',
            //    text: "Challenges already created. Do you want to refresh!",
            //    icon: 'warning',
            //    showCancelButton: true,
            //    confirmButtonColor: '#3085d6',
            //    cancelButtonColor: '#d33',
            //    confirmButtonText: 'Yes, Continue it!'
            //}).then((result) => {
            //    if (result.value) {
            //        //debugger;
            //        refreshcreditpull();
            //        //
            //    }
            //})
        }
        else
        {
             refreshcreditpull();

        }



    });
    //$("#AddChallenge").click(function () {

    //    ////debugger;
    //    var values = new Array();
    //    var cha = new Array();
    //    var status = true;
    //    var Id = getUrlParameter('ClientId');
    //    var countchecked = $("table input[type=checkbox]:checked").length;

    //    if (countchecked == 0) {
    //        Swal.fire("Warning", "please select at least one checkbox", "warning");
    //        return false;
    //    }


    //    //if (cha == 0) {
    //    //    Swal.fire("!Warning", "please check at least one checkbox", "warning");
    //    //    return false;
    //    //}
    //    $(":input[name='case[]']:checked").each(function (i) {

    //        ////debugger;
    //        var data = $(this).parents('tr:eq(0)');
    //        var td = $(data).find('td:eq(8)').find('input').val();

    //        if (td == "" || td == undefined) {
    //            Swal.fire("Warning", "Please select challenge", "warning");
    //            $(data).find('td:eq(8)').find('input').focus();
    //            return false;
    //        }
    //        ////debugger;
    //        values.push({
    //            'MerchantName': $(data).find('td:eq(3)').text(),
    //            'AccountId': $(data).find('td:eq(4)').text(),
    //            'OpenDate': $(data).find('td:eq(5)').text(),
    //            'CurrentBalance': $(data).find('td:eq(6)').text(),
    //            'HighestBalance': $(data).find('td:eq(7)').text(),
    //            'Challenge': $(data).find('td:eq(8)').find('input').val(),
    //            'CredRepItemsId': $(data).find('td:eq(9)').text(),
    //        });

    //    });


    //    ////debugger;
    //    console.log(values);

    //    for (var i = 0; i < values.length; i++) {
    //        cha[i] = values[i].Challenge;
    //    }

    //    ////debugger;
    //    var res = 0;
    //    if (countchecked == cha.length) {
    //        $(".loader1").show();
    //        $("#overlay").show();
    //            $.ajax({
    //                method: "POST",
    //                url: "/Client/ClientChallengeform",
    //                dataType: "json",
    //                data: { credit: values, Id: Id },
    //                success: function (data) {
    //                    if (data == true) {
    //                        Swal.fire({
    //                            title: "Success!",
    //                            text: "Challenge created successfully.!",
    //                            type: 'success',


    //                        }).then(function () {
    //                            if (from == "db") {
    //                                window.location.href = "/dashboard/agent";
    //                            } else {
    //                                window.location.href = "/Client/CreditItems?ClientId=" + Id;
    //                            }
    //                        })
    //                    }
    //                    else {
    //                        $(".loader1").hide();
    //                        $("#overlay").hide();
    //                    }
    //                }
    //            });

    //        //i = 0;

    //    }


    //});

    $("#PullCreditItems").on("click", function () {

        ////debugger;
        var values = new Array();
        values.push({
            'MerchantName': "BANK OF USA",
            'AccountId': "656458-XXXXX",
            'OpenDate': "06/1988",
            'CurrentBalance': "$20,000",
            'HighestBalance': "$30,000",
            'Status': "30-daysleft",
        });
        //values.push({
        //    'MerchantName': "AXIS",
        //    'AccountId': "546321789",
        //    'OpenDate': "02-03-2000",
        //    'CurrentBalance': "600",
        //    'HighestBalance': "800",
        //    'Status': "30-daysleft",
        //});
        //values.push({
        //    'MerchantName': "Merchant3",
        //    'AccountId': "456",
        //    'OpenDate': "2019-09-10",
        //    'CurrentBalance': "700",
        //    'HighestBalance': "900",
        //    'Status': "30-daysleft",
        //});
        //values.push({
        //    'MerchantName': "Merchant4",
        //    'AccountId': "675",
        //    'OpenDate': "2019-09-10",
        //    'CurrentBalance': "800",
        //    'HighestBalance': "850",
        //    'Status': "30-daysleft",
        //});
        console.log(values);

        $.ajax({
            method: "POST",
            url: "/Client/CheckIdentityIQInfo",
            data: { clientId: Id },
            dataType: "json",
            success: function (data) {

                if (data == true) {

                    $.ajax({
                        method: "POST",
                        url: "/Client/AddCreditReport",
                        dataType: "json",
                        data: { credit: values, clientId: Id },
                        success: function (data) {
                            ////debugger;
                            var ReportId = data;
                            if (ReportId == "report") {
                                Swal.fire({
                                    title: "Warning!",
                                    text: "Records already pulled!",
                                    type: 'warning',

                                }).then(function () {
                                    window.location.href = "/Client/CreditItems?ClientId=" + Id;
                                })
                            }
                            else {

                                window.location.href = "/Client/CreditItems?ClientId=" + Id;
                            }


                            //if (ReportId != null && ReportId != "") {

                            //    $.ajax({
                            //        method: "POST",
                            //        url: "/Client/AddCreditReportItems",
                            //        dataType: "json",
                            //        data: { credit: values, Id: ReportId },
                            //        success: function (data) {
                            //            ////debugger;
                            //            if (data == true) {

                            //                window.location.href = "/Client/CreditItems?ClientId=" + Id;

                            //            }

                            //        }
                            //    });

                            //} else {

                            //    Swal.fire({
                            //        title: "Warning!",
                            //        text: "Records already pulled!",
                            //        type: 'warning',

                            //    }).then(function () {
                            //        window.location.href = "/Client/CreditItems?ClientId=" + Id;
                            //    })
                            //}

                        }
                    });
                }


                else {

                    Swal.fire({
                        title: "Warning!",
                        text: "Identity IQ Information not available.",
                        type: 'warning',

                    }).then(function () {
                        window.location.href = "/Client/CreditItems?ClientId=" + Id;
                    })
                }
            }
        });

    });




    //account history
    function disableChallengetxtAH() {
        debugger;
            var items=@Html.Raw(Json.Encode(ViewBag.challenges));
            var i = 0;
            for (var i = 0; i < items.length; i++) {

                    var EQUIChallenge = $("#EQUIChallenge_" + i).val();
                    var EXPEChallenge = $("#EXPEChallenge_" + i).val();
                    var TRANSChallenge = $("#TRANSChallenge_" + i).val();

                var k = i + 2;
                var hdnEQUICreditRepItemId = $("#hdnEQUICreditRepItemId_" + k).text();
                var hdnEXPECreditRepItemId = $("#hdnEXPECreditRepItemId_" + k).text();
                var hdnTRANSCreditRepItemId = $("#hdnTRANSCreditRepItemId_" + k).text();

                if (EQUIChallenge != "" && EQUIChallenge != undefined && hdnEQUICreditRepItemId != "") {
                    debugger
                    $("#EQUIChallenge_" + i).attr('disabled', 'disabled');
                }
                if (EXPEChallenge != "" && EXPEChallenge != undefined && hdnEXPECreditRepItemId != "") {
                    debugger
                    $("#EXPEChallenge_" + i).attr('disabled', 'disabled');
                }
                if (TRANSChallenge != "" && TRANSChallenge != undefined && hdnTRANSCreditRepItemId != "") {
                     debugger
                    $("#TRANSChallenge_" + i).attr('disabled', 'disabled');
                }
            }

    }

    //inquiries
    function disableChallengetxtINQ() {
        debugger;
          var items=@Html.Raw(Json.Encode(ViewBag.Inquires));
            var i = 0;
        for (var i = 0; i < items.length; i++)
        {

                //Reading  Inquiries challenge text from Inquiries table
                    var EQUIChallenge = $("#EQUIInquiriesChallenge_" + i).val();
                    var EXPEChallenge = $("#EXPEInquiriesChallenge_" + i).val();
                    var TRANSChallenge = $("#TRANSInquiriesChallenge_" + i).val();

                //Reading  CreditInqId from  Inquiries table
                var k = i + 2;
                var hdnEQUICreditInqId = $("#hdnEQUICreditInqId_" + k).text();
                var hdnEXPECreditInqId = $("#hdnEXPECreditInqId_" + k).text();
                var hdnTRANSCreditInqId = $("#hdnTRANSCreditInqId_" + k).text();

                if (EQUIChallenge != "" && EQUIChallenge != undefined && hdnEQUICreditInqId != "") {
                    $("#EQUIInquiriesChallenge_" + i).attr('disabled', 'disabled');
                }

                if (EXPEChallenge != "" && EXPEChallenge != undefined && hdnEXPECreditInqId != "") {
                     $("#EXPEInquiriesChallenge_" + i).attr('disabled', 'disabled');
                }

                if (TRANSChallenge != "" && TRANSChallenge != undefined && hdnTRANSCreditInqId != "") {
                      $("#TRANSInquiriesChallenge_" + i).attr('disabled', 'disabled');
                }
        }

    }


    //enabel checkbox
    function EnableCheckBox(id)
    {

        if ($("#" + id).prop('disabled') == true) {
            $("#" + id).removeAttr('disabled', 'disabled');
        } else {
            $("#" + id).attr('disabled', 'disabled');
        }
    }




    //

    //text box AutoFillAccountType experien
    function AutoFillAccountTypeEX(id)
    {
        debugger;
         var localAccountTypes = [];
         var items=@Html.Raw(Json.Encode(ViewBag.AllAccountTypes));
         var Accounttype = $("#txtAccountTypeEX_" + id).val();

            $("#txtAccountTypeEX_"+id).autocomplete({
                source: function (request, response) {

                    for (i = 0; i < items.length; i++) {
                        var stritem = items[i].toUpperCase();
                        var tre = stritem.match(Accounttype.toUpperCase());
                        if (tre != null) {
                           localAccountTypes.push(stritem);
                        }
                    }
                    response($.map(localAccountTypes, function (item) {
                        return item
                    }))
                },
                select: function (e, i) {
                    //$("#lblChallengeTextTU_"+id).val(i.item.val);
                },
                minLength: 1
            });

    }

    //

     //text box AutoFillAccountType Tu
    function AutoFillAccountTypeTU(id)
    {
         var localAccountTypes = [];
         var items=@Html.Raw(Json.Encode(ViewBag.AllAccountTypes));
        var Accounttype = $("#txtAccountTypeTU_" + id).val();
        debugger;
            $("#txtAccountTypeTU_"+id).autocomplete({
                 source: function (request, response) {
                    for (i = 0; i < items.length; i++) {
                        var stritem = items[i].toUpperCase();
                        var tre = stritem.match(Accounttype.toUpperCase());
                        if (tre != null) {
                           localAccountTypes.push(stritem);
                        }
                    }
                    response($.map(localAccountTypes, function (item) {
                        return item
                    }))
                },
                select: function (e, i) {
                    //$("#lblChallengeTextTU_"+id).val(i.item.val);
                },
                minLength: 1
            });

    }

    //

      //text box AutoFillAccountType Tu
    function AutoFillAccountTypeEQ(id)
    {
         var localAccountTypes = [];
         var items=@Html.Raw(Json.Encode(ViewBag.AllAccountTypes));
        var Accounttype = $("#txtAccountTypeEQ_" + id).val();
        debugger;
            $("#txtAccountTypeEQ_"+id).autocomplete({
                source: function (request, response) {
                    for (i = 0; i < items.length; i++) {
                        var stritem = items[i].toUpperCase();
                        var tre = stritem.match(Accounttype.toUpperCase());
                        if (tre != null) {
                           localAccountTypes.push(stritem);
                        }
                    }
                    response($.map(localAccountTypes, function (item) {
                        return item
                    }))
                },
                select: function (e, i) {
                    //$("#lblChallengeTextTU_"+id).val(i.item.val);
                },
                minLength: 1
            });

    }

    //


    //inquires
      //text box AutoFillAccountType Tu
    function AutoFillInquiriesAccountTypeTU(id)
    {
         var localAccountTypes = [];
         var items=@Html.Raw(Json.Encode(ViewBag.AllAccountTypes));
        var Accounttype = $("#TRANSInquiriesChallenge_" + id).val();
        debugger;
            $("#TRANSInquiriesChallenge_"+id).autocomplete({
                source: function (request, response) {
                    for (i = 0; i < items.length; i++) {
                        var stritem = items[i].toUpperCase();
                        var tre = stritem.match(Accounttype.toUpperCase());
                        if (tre != null) {
                           localAccountTypes.push(stritem);
                        }
                    }
                    response($.map(localAccountTypes, function (item) {
                        return item
                    }))
                },
                select: function (e, i) {
                    //$("#lblChallengeTextTU_"+id).val(i.item.val);
                },
                minLength: 1
            });

    }

    //ex

    function AutoFillInquiriesAccountTypeEX(id) {
          var localAccountTypes = [];
         var items=@Html.Raw(Json.Encode(ViewBag.AllAccountTypes));
        var Accounttype = $("#EXPEInquiriesChallenge_" + id).val();
        debugger;
        $("#EXPEInquiriesChallenge_" + id).autocomplete({
            source: function (request, response) {
                    for (i = 0; i < items.length; i++) {
                       var stritem = items[i].toUpperCase();
                        var tre = stritem.match(Accounttype.toUpperCase());
                        if (tre != null) {
                           localAccountTypes.push(stritem);
                        }
                    }
                    response($.map(localAccountTypes, function (item) {
                        return item
                    }))
                },
                select: function (e, i) {
                    //$("#lblChallengeTextTU_"+id).val(i.item.val);
                },
                minLength: 1
        });

    }


     //eq

    function AutoFillInquiriesAccountTypeEQ(id) {
          var localAccountTypes = [];
         var items=@Html.Raw(Json.Encode(ViewBag.AllAccountTypes));
        var Accounttype = $("#EQUIInquiriesChallenge_" + id).val();
        debugger;
        $("#EQUIInquiriesChallenge_" + id).autocomplete({
             source: function (request, response) {
                    for (i = 0; i < items.length; i++) {
                       var stritem = items[i].toUpperCase();
                        var tre = stritem.match(Accounttype.toUpperCase());
                        if (tre != null) {
                           localAccountTypes.push(stritem);
                        }
                    }
                    response($.map(localAccountTypes, function (item) {
                        return item
                    }))

                },
                select: function (e, i) {
                    //$("#lblChallengeTextTU_"+id).val(i.item.val);
                },
                minLength: 1
        });

    }

</script>